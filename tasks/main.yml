---
- name: Ensure os family is Debian.
  ansible.builtin.assert:
    that: "ansible_os_family =='Debian'"

- name: Define repository base path.
  block:
    - name: Define Ubuntu repository base path.
      ansible.builtin.set_fact:
        repository_base_path: "xUbuntu_22.04"
      when: ansible_facts.distribution == "Ubuntu"
    - name: Define Debian repository base path.
      ansible.builtin.set_fact:
        repository_base_path: "Debian_Testing"
      when: ansible_facts.distribution != "Ubuntu"

- name: Update apt cache.
  ansible.builtin.apt:
    update_cache: true
    cache_valid_time: 3600

- name: Ensure dependencies are installed.
  ansible.builtin.package:
    name: "{{ item }}"
    state: present
  loop: "{{ required_packages }}"

- name: Ensure apt key is installed.
  ansible.builtin.apt_key:
    id: "{{ podman_apt_key.id | default(omit) }}"
    url: "{{ podman_apt_key.url }}"
    keyring: "{{ podman_apt_key.keyring }}"
    state: "{{ podman_apt_key.state | default('present') }}"

- name: Ensure apt repository file is present.
  ansible.builtin.apt_repository:
    filename: "{{ podman_apt_repository.filename }}"
    repo: "{{ podman_apt_repository.repo }}"
    mode: "{{ podman_apt_repository.mode | default('0644') }}"
    state: "{{ podman_apt_repository.state | default('present') }}"
    update_cache: true

- name: Ensure apt packages are installed.
  ansible.builtin.package:
    name: "{{ item }}"
    state: present
  loop: "{{ podman_install_packages }}"
  notify: Restart podman
  register: result

- name: Ensure podman is started and enabled at boot.
  ansible.builtin.service:
    name: podman
    state: restarted
    enabled: true
  ignore_errors: "{{ ansible_check_mode }}"
  when: not ansible_check_mode and (result.results | selectattr("changed", "equalto", true) | length) > 0
